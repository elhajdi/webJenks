<?xml version="1.0" encoding="UTF-8"?>
<project name="Web-test-Jenks" default="full-build">

 <!-- Use this when the tools are located as PHARs in ${basedir}/build/tools -->
 <property name="pdepend" value="${basedir}/build/tools/pdepend.phar"/>
 <property name="phpcpd"  value="${basedir}/build/tools/phpcpd.phar"/>
 <property name="phpcs"   value="${basedir}/build/tools/phpcs.phar"/>
 <property name="phpdox"  value="${basedir}/build/tools/phpdox.phar"/>
 <property name="phploc"  value="${basedir}/build/tools/phploc.phar"/>
 <property name="phpmd"   value="${basedir}/build/tools/phpmd.phar"/>
 <!-- <property name="phpunit" value="${basedir}/build/tools/phpunit.phar"/>  -->
 <property name="phpunit" value="${basedir}/vendor/bin/phpunit"/>
 <property name="path_composer" value="${basedir}/build/tools/composer.phar"/> 
	
	
 <target name="full-build"
         depends="prepare,composer,lint, phpunit, phpdox"
         description="Performs runs the tests, and generates project documentation"/>

    <target name="composer" description="Installing composer dependencies">
	  <exec executable="${path_composer}" failonerror="true">
	    <arg value="install" />
	  </exec>
	</target>
	
	<target name="phpunit"
	         unless="phpunit.done"
	         depends="prepare"
	         description="Run unit tests with PHPUnit">
	  <exec executable="${phpunit}" resultproperty="result.phpunit" taskname="phpunit">
	  <exec dir="."
      command="${phpunit} --log-junit '${basedir}/build/unitreport.xml'
                       --coverage-html '${basedir}/build/coverage'
                       --coverage-clover '${basedir}/build/coverage/coverage.xml'
                       test/"
		/>
	   <arg path="${basedir}/phpunit.xml"/>
	  </exec>

	  <property name="phpunit.done" value="true"/>
	</target>

	<target name="lint" unless="lint.done" description="Perform syntax check of sourcecode files">
	    <apply executable="php" taskname="lint">
	     <arg value="-l" />
		  <fileset dir="${basedir}/">
		      <include name="index.php" />
		      <exclude name="**/build/*" />
		      <exclude name="**/vendor/*" />
		      <modified />
	     </fileset>
	     <fileset dir="${basedir}/src">
	      <include name="**/*.php" />
	      <exclude name="**/cache/*" />
	      <modified />
	     </fileset>

	     <fileset dir="${basedir}/tests">
	      <include name="**/*.php" />
	      <modified />
	     </fileset>
	    </apply>

	    <property name="lint.done" value="true"/>
	</target>

	 <target name="phpdox"
	         unless="phpdox.done"
	         depends="phploc-ci,phpcs-ci,phpmd-ci"
	         description="Generate project documentation using phpDox">
	  <exec executable="${phpdox}" dir="${basedir}/build" taskname="phpdox"/>

	  <property name="phpdox.done" value="true"/>
	 </target>

	<target name="phploc-ci"
	         unless="phploc.done"
	         depends="prepare"
	         description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
	  <exec executable="${phploc}" taskname="phploc">
	   <arg value="--count-tests" />
	   <arg value="--log-csv" />
	   <arg path="${basedir}/build/logs/phploc.csv" />
	   <arg value="--log-xml" />
	   <arg path="${basedir}/build/logs/phploc.xml" />
	   <arg path="${basedir}/src" />
	   <arg path="${basedir}/tests" />
	  </exec>

	  <property name="phploc.done" value="true"/>
	</target>
	<target name="phpmd-ci"
	         unless="phpmd.done"
	         depends="prepare"
	         description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
	  <exec executable="${phpmd}" taskname="phpmd">
	   <arg path="${basedir}/src" />
	   <arg value="xml" />
	   <arg path="${basedir}/build/phpmd.xml" />
	   <arg value="--reportfile" />
	   <arg path="${basedir}/build/logs/pmd.xml" />
	  </exec>

	  <property name="phpmd.done" value="true"/>
	</target>

	<target name="phpcs-ci"
	         unless="phpcs.done"
	         depends="prepare"
	         description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
	  <exec executable="${phpcs}" output="/dev/null" taskname="phpcs">
	   <arg value="--report=checkstyle" />
	   <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
	   <arg value="--standard=PSR2" />
	   <arg value="--extensions=php" />
	   <arg value="--ignore=autoload.php" />
	   <arg path="${basedir}/src" />
	   <arg path="${basedir}/tests" />
	  </exec>

	  <property name="phpcs.done" value="true"/>
	 </target>


	<target name="clean"
	         unless="clean.done"
	         description="Cleanup build artifacts">
	    <delete dir="${basedir}/build/api"/>
	    <delete dir="${basedir}/build/coverage"/>
	    <delete dir="${basedir}/build/logs"/>
	    <delete dir="${basedir}/build/pdepend"/>
	    <delete dir="${basedir}/build/phpdox"/>
	    <property name="clean.done" value="true"/>
	</target>

	<target name="prepare"
	         unless="prepare.done"
	         depends="clean"
	         description="Prepare for build">
	    <mkdir dir="${basedir}/build/api"/>
	    <mkdir dir="${basedir}/build/api/html"/>
	    <mkdir dir="${basedir}/build/coverage"/>
	    <mkdir dir="${basedir}/build/logs"/>
	    <mkdir dir="${basedir}/build/pdepend"/>
	    <mkdir dir="${basedir}/build/phpdox"/>
	    <property name="prepare.done" value="true"/>
	</target>
</project>